{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "f65e4048-3645-4cd0-b331-402f60462b80",
   "metadata": {},
   "source": [
    "# Data analysis"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "3adf76a0-9aa1-4689-9d0f-a2f7a1b8ce58",
   "metadata": {},
   "source": [
    "## Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bff54e93-afcd-4ce2-acc5-6afed48a32b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from qiskit_experiments.framework import (\n",
    "    ExperimentData,\n",
    "    ExperimentDecoder,\n",
    "    ExperimentEncoder,\n",
    ")\n",
    "from qiskit_research.mzm_generation import KitaevHamiltonianAnalysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "018a7f8e-ca01-4736-a2b4-408747a65a0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# use this cell to retrieve data from the Qiskit Experiments database service\n",
    "\n",
    "# from qiskit import IBMQ\n",
    "# IBMQ.load_account()\n",
    "# provider = IBMQ.get_provider(hub=\"ibm-q-internal\", group=\"deployed\", project=\"default\")\n",
    "\n",
    "# db_experiment_id = '960a6482-1a98-4509-96d3-2c46ac35b733'\n",
    "\n",
    "# # retrieve data\n",
    "# data = ExperimentData.load(db_experiment_id, provider.service(\"experiment\"))\n",
    "\n",
    "# # save data to local disk\n",
    "# params = data.metadata[\"params\"]\n",
    "# filename = f\"data/{params.filename}.json\"\n",
    "# os.makedirs(os.path.dirname(filename), exist_ok=True)\n",
    "# with open(filename, \"w\") as f:\n",
    "#     json.dump(data, f, cls=ExperimentEncoder)\n",
    "\n",
    "# print(params.filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1548f78e-13e8-42f1-9388-f20f4cf66816",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# load data from local disk\n",
    "\n",
    "filename = \"2023-05-23T113937.711789_aer_simulator_n3\"\n",
    "\n",
    "# directory with test data, edit this as appropriate\n",
    "basedir = \"../../test/test_data/mzm_generation\"\n",
    "# basedir = \"\"\n",
    "with open(os.path.join(basedir, \"data\", f\"{filename}.json\")) as f:\n",
    "    # this may raise an error from Qiskit Experiments but it should be safe to ignore\n",
    "    data = json.load(f, cls=ExperimentDecoder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea6ed678-9373-4a03-b9a7-1c56562c78eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "# run analysis\n",
    "analysis = KitaevHamiltonianAnalysis()\n",
    "data = analysis.run(data, replace_results=True)\n",
    "data.block_for_results()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "017dcb97-1bcc-498a-8861-b2405aea583a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "params = data.metadata[\"params\"]\n",
    "\n",
    "# load results\n",
    "fidelity_witness_avg = data.analysis_results(\"fidelity_witness_avg\").value\n",
    "energy_exact = data.analysis_results(\"energy_exact\").value\n",
    "energy = data.analysis_results(\"energy\").value\n",
    "energy_error = data.analysis_results(\"energy_error\").value\n",
    "bdg_energy_exact = data.analysis_results(\"bdg_energy_exact\").value\n",
    "bdg_energy = data.analysis_results(\"bdg_energy\").value\n",
    "edge_correlation_exact = data.analysis_results(\"edge_correlation_exact\").value\n",
    "edge_correlation = data.analysis_results(\"edge_correlation\").value\n",
    "number_exact = data.analysis_results(\"number_exact\").value\n",
    "number = data.analysis_results(\"number\").value\n",
    "parity_exact = data.analysis_results(\"parity_exact\").value\n",
    "parity = data.analysis_results(\"parity\").value\n",
    "site_correlation_exact = data.analysis_results(\"site_correlation_exact\").value\n",
    "site_correlation = data.analysis_results(\"site_correlation\").value\n",
    "\n",
    "# create plot directory\n",
    "PLOT_DIR = f\"plots/{params.filename}\"\n",
    "os.makedirs(PLOT_DIR, exist_ok=True)\n",
    "\n",
    "# set plot options\n",
    "dpi = 150\n",
    "filetype = \"pdf\"\n",
    "\n",
    "print(params)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "a7bbe904-e90b-4c9e-97e7-3e4574b7bc24",
   "metadata": {},
   "source": [
    "## Make plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c78d88b4-85cd-4ed4-a5eb-8a13f057a435",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot fidelity witness and average energy error\n",
    "dd_sequence = None\n",
    "# dd_sequence = \"XY4pm\"\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, dpi=dpi)\n",
    "fig.subplots_adjust(wspace=0.25)\n",
    "\n",
    "values, stddev = fidelity_witness_avg[dd_sequence][\"raw\"]\n",
    "ax1.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    1 - values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"o:\",\n",
    "    label=\"Raw\",\n",
    ")\n",
    "values, stddev = fidelity_witness_avg[dd_sequence][\"mem\"]\n",
    "ax1.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    1 - values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"^:\",\n",
    "    label=\"+MEM\",\n",
    ")\n",
    "values, stddev = fidelity_witness_avg[dd_sequence][\"ps\"]\n",
    "ax1.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    1 - values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"D:\",\n",
    "    label=\"+PS\",\n",
    ")\n",
    "values, stddev = fidelity_witness_avg[dd_sequence][\"pur\"]\n",
    "ax1.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    1 - values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"s:\",\n",
    "    label=\"+Pur.\",\n",
    ")\n",
    "ax1.set_xlabel(r\"$\\mu$\")\n",
    "ax1.set_title(r\"$1 - F_W$\")\n",
    "ax1.set_yscale(\"log\")\n",
    "ax1.set_ylim(1e-2, 10)\n",
    "\n",
    "values, stddev = energy_error[dd_sequence][\"raw\"]\n",
    "ax2.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"o:\",\n",
    "    label=\"Raw\",\n",
    ")\n",
    "values, stddev = energy_error[dd_sequence][\"mem\"]\n",
    "ax2.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"^:\",\n",
    "    label=\"+MEM\",\n",
    ")\n",
    "values, stddev = energy_error[dd_sequence][\"ps\"]\n",
    "ax2.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"D:\",\n",
    "    label=\"+PS\",\n",
    ")\n",
    "values, stddev = energy_error[dd_sequence][\"pur\"]\n",
    "ax2.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"s:\",\n",
    "    label=\"+Pur.\",\n",
    ")\n",
    "ax2.set_xlabel(r\"$\\mu$\")\n",
    "ax2.set_title(r\"Energy error\")\n",
    "ax2.set_yscale(\"log\")\n",
    "ax2.set_ylim(1e-2, 10)\n",
    "# ax1.legend(loc=(0.05, 0.33))\n",
    "ax1.legend(loc=(0.05, 0.28))\n",
    "# ax1.legend(loc=\"center left\")\n",
    "fig.suptitle(\n",
    "    rf\"$n = {params.n_modes}$\",\n",
    "    size=\"x-large\",\n",
    "    # y=0.02\n",
    ")\n",
    "\n",
    "data.add_figures(fig, \"fidelity_witness\", overwrite=True)\n",
    "plt.savefig(\n",
    "    f\"{PLOT_DIR}/fidelity_witness_dd-{dd_sequence}_n{params.n_modes}.{filetype}\"\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e38c7afd-661a-4e6b-9b1f-98f5fef8c483",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot fidelity witness and average energy error, dd vs no dd\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, dpi=dpi)\n",
    "fig.subplots_adjust(wspace=0.25)\n",
    "\n",
    "values, stddev = fidelity_witness_avg[None][\"pur\"]\n",
    "ax1.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    1 - values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"s:\",\n",
    "    label=\"No DD\",\n",
    ")\n",
    "values, stddev = fidelity_witness_avg[dd_sequence][\"pur\"]\n",
    "ax1.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    1 - values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"^:\",\n",
    "    label=\"DD\",\n",
    ")\n",
    "ax1.set_xlabel(r\"$\\mu$\")\n",
    "ax1.set_title(r\"$1 - F_W$\")\n",
    "ax1.set_yscale(\"log\")\n",
    "ax1.set_ylim(1e-2, 1)\n",
    "\n",
    "values, stddev = energy_error[None][\"pur\"]\n",
    "ax2.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"s:\",\n",
    "    label=\"No DD\",\n",
    ")\n",
    "values, stddev = energy_error[dd_sequence][\"pur\"]\n",
    "ax2.errorbar(\n",
    "    params.chemical_potential_values,\n",
    "    values,\n",
    "    yerr=2 * stddev,\n",
    "    fmt=\"^:\",\n",
    "    label=\"DD\",\n",
    ")\n",
    "ax2.set_xlabel(r\"$\\mu$\")\n",
    "ax2.set_title(r\"Energy error\")\n",
    "ax2.set_yscale(\"log\")\n",
    "ax2.set_ylim(1e-2, 1)\n",
    "ax1.legend(loc=\"upper left\")\n",
    "fig.suptitle(\n",
    "    rf\"$n = {params.n_modes}$\",\n",
    "    size=\"x-large\",\n",
    "    # y=0.02\n",
    ")\n",
    "\n",
    "data.add_figures(fig, \"fidelity_witness_dd\", overwrite=True)\n",
    "plt.savefig(f\"{PLOT_DIR}/fidelity_witness_dd_compare_n{params.n_modes}.{filetype}\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e88219d-d933-4ee9-8566-13b7ca01b5e5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# plot BdG energies\n",
    "fig, ax = plt.subplots(dpi=dpi)\n",
    "prop_cycle = plt.rcParams[\"axes.prop_cycle\"]\n",
    "colors = prop_cycle.by_key()[\"color\"]\n",
    "capsize = 6\n",
    "\n",
    "ideal_lines = []\n",
    "for i, energies in enumerate(bdg_energy_exact[0]):\n",
    "    color = \"gray\" if i % 2 else \"black\"\n",
    "    ideal_lines.append(\n",
    "        ax.plot(\n",
    "            bdg_energy_exact[1], energies, color=color, label=None if i else \"Ideal\"\n",
    "        )\n",
    "    )\n",
    "\n",
    "threshold = len(bdg_energy[dd_sequence][\"raw\"][0]) // 2\n",
    "raw_values, raw_stddev = bdg_energy[dd_sequence][\"raw\"]\n",
    "mit_values, mit_stddev = bdg_energy[dd_sequence][\"pur\"]\n",
    "\n",
    "raw_lines = []\n",
    "mit_lines = []\n",
    "for i in range(threshold):\n",
    "    alpha = 1.0 if i == 0 else 0.6\n",
    "    raw1 = ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        raw_values[i],\n",
    "        yerr=2 * raw_stddev[i],\n",
    "        fmt=\"o\",\n",
    "        capsize=capsize,\n",
    "        color=colors[0],\n",
    "        alpha=alpha,\n",
    "        label=None if i else \"Raw\",\n",
    "    )\n",
    "    raw2 = ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        raw_values[threshold + i],\n",
    "        yerr=2 * raw_stddev[threshold + i],\n",
    "        fmt=\"o\",\n",
    "        capsize=capsize,\n",
    "        color=colors[0],\n",
    "        alpha=alpha,\n",
    "    )\n",
    "    mit1 = ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        mit_values[i],\n",
    "        yerr=2 * mit_stddev[i],\n",
    "        fmt=\"s\",\n",
    "        capsize=capsize,\n",
    "        color=colors[1],\n",
    "        alpha=alpha,\n",
    "        label=None if i else \"Mit.\",\n",
    "    )\n",
    "    mit2 = ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        mit_values[threshold + i],\n",
    "        yerr=2 * mit_stddev[threshold + i],\n",
    "        fmt=\"s\",\n",
    "        capsize=capsize,\n",
    "        color=colors[1],\n",
    "        alpha=alpha,\n",
    "    )\n",
    "    raw_lines.append(raw1)\n",
    "    raw_lines.append(raw2)\n",
    "    mit_lines.append(mit1)\n",
    "    mit_lines.append(mit2)\n",
    "ax.set_xlabel(r\"$\\mu$\")\n",
    "ax.set_ylabel(r\"Excitation energy\")\n",
    "ax.set_ylim(-2.5, 2.5)\n",
    "\n",
    "from matplotlib.legend_handler import HandlerLine2D, HandlerTuple\n",
    "\n",
    "(p1,) = ideal_lines[0]\n",
    "(p2,) = ideal_lines[1]\n",
    "q1 = raw_lines[0]\n",
    "q2 = raw_lines[2]\n",
    "r1 = mit_lines[0]\n",
    "r2 = mit_lines[2]\n",
    "ax.legend(\n",
    "    [(p1, p2), (q1, q2), (r1, r2)],\n",
    "    [\"Ideal\", \"Raw\", \"Mit.\"],\n",
    "    numpoints=1,\n",
    "    handler_map={tuple: HandlerTuple(ndivide=None)},\n",
    ")\n",
    "# ax.legend(loc=\"center right\")\n",
    "\n",
    "ax.set_title(rf\"$n = {params.n_modes}$\", size=\"x-large\", y=0.90)\n",
    "\n",
    "data.add_figures(fig, \"bdg_energy\", overwrite=True)\n",
    "plt.savefig(f\"{PLOT_DIR}/bdg_energy_dd-{dd_sequence}_n{params.n_modes}.{filetype}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38fecf37-f1b6-413a-8da0-cfdcb460501b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "### plot site correlation\n",
    "prop_cycle = plt.rcParams[\"axes.prop_cycle\"]\n",
    "colors = prop_cycle.by_key()[\"color\"]\n",
    "capsize = 6\n",
    "\n",
    "xvals = range(2, 2 * params.n_modes + 1)\n",
    "\n",
    "chemical_potentials_to_plot = params.chemical_potential_values[:3]\n",
    "# chemical_potentials_to_plot = params.chemical_potential_values\n",
    "occupied_orbitals_to_plot = params.occupied_orbitals_list[0:3:2]\n",
    "# occupied_orbitals_to_plot = params.occupied_orbitals_list[2:4]\n",
    "\n",
    "fig, axes = plt.subplots(len(chemical_potentials_to_plot), 1, dpi=dpi, figsize=(6, 8))\n",
    "# fig.subplots_adjust(hspace=0.7)\n",
    "\n",
    "ideal_lines = []\n",
    "raw_lines = []\n",
    "mit_lines = []\n",
    "for index, (ax, chemical_potential) in enumerate(\n",
    "    zip(axes, chemical_potentials_to_plot)\n",
    "):\n",
    "    for i, occupied_orbitals in enumerate(occupied_orbitals_to_plot):\n",
    "        alpha = 1.0 if i == 0 else 0.6\n",
    "        # this_parity = int(parity_exact[occupied_orbitals][0][index])\n",
    "        ideal_color = \"black\" if i == 0 else \"gray\"\n",
    "        ideal_text = str(list(occupied_orbitals)).replace(\"[\", \"{\").replace(\"]\", \"}\")\n",
    "        if index == 0:\n",
    "            ax.text(4.5 + i * 0.5, 0.83, ideal_text, color=ideal_color)\n",
    "        site_correlations = site_correlation_exact[\n",
    "            chemical_potential, occupied_orbitals\n",
    "        ]\n",
    "        ideal_lines.append(\n",
    "            ax.plot(\n",
    "                xvals,\n",
    "                site_correlations,\n",
    "                \".--\",\n",
    "                color=ideal_color,\n",
    "                label=\"Ideal\" if not occupied_orbitals else None,\n",
    "            )\n",
    "        )\n",
    "        (vals, stddevs) = site_correlation[dd_sequence][\"raw\"][\n",
    "            chemical_potential, occupied_orbitals\n",
    "        ]\n",
    "        raw_lines.append(\n",
    "            ax.errorbar(\n",
    "                xvals,\n",
    "                vals,\n",
    "                yerr=2 * np.array(stddevs),\n",
    "                fmt=\"o\",\n",
    "                capsize=capsize,\n",
    "                color=colors[0],\n",
    "                alpha=alpha,\n",
    "                label=None if i else \"Raw\",\n",
    "            )\n",
    "        )\n",
    "        (vals, stddevs) = site_correlation[dd_sequence][\"pur\"][\n",
    "            chemical_potential, occupied_orbitals\n",
    "        ]\n",
    "        mit_lines.append(\n",
    "            ax.errorbar(\n",
    "                xvals,\n",
    "                vals,\n",
    "                yerr=2 * np.array(stddevs),\n",
    "                fmt=\"s\",\n",
    "                capsize=capsize,\n",
    "                color=colors[1],\n",
    "                alpha=alpha,\n",
    "                label=None if i else \"Mit.\",\n",
    "            )\n",
    "        )\n",
    "        ax.set_ylim(-1.1, 1.1)\n",
    "    ax.set_ylabel(r\"$\\langle i \\gamma_1 \\gamma_j \\rangle$\")\n",
    "    ax.set_xticks(xvals)\n",
    "    if index == 0:\n",
    "        from matplotlib.legend_handler import HandlerLine2D, HandlerTuple\n",
    "\n",
    "        (p1,) = ideal_lines[0]\n",
    "        (p2,) = ideal_lines[1]\n",
    "        q1 = raw_lines[0]\n",
    "        q2 = raw_lines[1]\n",
    "        r1 = mit_lines[0]\n",
    "        r2 = mit_lines[1]\n",
    "        ax.legend(\n",
    "            [(p1, p2), (q1, q2), (r1, r2)],\n",
    "            [\"Ideal\", \"Raw\", \"Mit.\"],\n",
    "            numpoints=1,\n",
    "            handler_map={tuple: HandlerTuple(ndivide=None)},\n",
    "            loc=\"upper left\",\n",
    "        )\n",
    "        # ax.legend(loc='lower left')\n",
    "    if index == len(axes) - 1:\n",
    "        ax.set_xlabel(r\"$j$\")\n",
    "    else:\n",
    "        ax.tick_params(axis=\"x\", labelbottom=False)\n",
    "\n",
    "    ax.set_title(rf\"$\\mu={chemical_potential}$\", y=0.85)\n",
    "\n",
    "fig.suptitle(rf\"$n = {params.n_modes}$\", size=\"x-large\", y=0.93)\n",
    "data.add_figures(fig, f\"site_correlation\", overwrite=True)\n",
    "plt.savefig(\n",
    "    f\"{PLOT_DIR}/site_correlation_dd-{dd_sequence}_n{params.n_modes}.{filetype}\"\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "119891b8-e169-4b35-9692-c82a0c55b9dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot energy\n",
    "fig, ax = plt.subplots(dpi=dpi)\n",
    "\n",
    "for occupied_orbitals, (energies, xvals) in energy_exact.items():\n",
    "    ax.plot(\n",
    "        xvals,\n",
    "        energies,\n",
    "        # label = \"Ideal\" if not i else None,\n",
    "        color=\"red\" if len(occupied_orbitals) % 2 else \"blue\",\n",
    "    )\n",
    "for occupied_orbitals, (energies, stddevs) in energy[dd_sequence][\"raw\"].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        energies,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"x\",\n",
    "        # label=\"Raw\" if not i else None,\n",
    "        color=\"red\" if len(occupied_orbitals) % 2 else \"blue\",\n",
    "        alpha=0.7,\n",
    "    )\n",
    "for occupied_orbitals, (energies, stddevs) in energy[dd_sequence][\"pur\"].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        energies,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"s\",\n",
    "        # label = \"Mit.\" if not i else None,\n",
    "        color=\"red\" if len(occupied_orbitals) % 2 else \"blue\",\n",
    "        alpha=0.7,\n",
    "    )\n",
    "ax.plot([], [], label=\"Ideal\", color=\"black\")\n",
    "ax.errorbar([], [], fmt=\"x\", label=\"Raw\", color=\"black\")\n",
    "ax.errorbar([], [], fmt=\"s\", label=\"Mit.\", color=\"black\")\n",
    "ax.set_xlabel(r\"$\\mu$\")\n",
    "ax.set_ylabel(r\"$\\langle H \\rangle$\")\n",
    "ax.set_title(rf\"$n = {params.n_modes}$\", size=\"x-large\", y=0.90)\n",
    "ax.legend()\n",
    "\n",
    "data.add_figures(fig, \"energy\", overwrite=True)\n",
    "plt.savefig(f\"{PLOT_DIR}/energy_dd-{dd_sequence}_n{params.n_modes}.{filetype}\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e843a609-dd21-4e19-9715-df2cbb84f368",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot parity\n",
    "fig, ax = plt.subplots(dpi=dpi)\n",
    "prop_cycle = plt.rcParams[\"axes.prop_cycle\"]\n",
    "colors = prop_cycle.by_key()[\"color\"]\n",
    "capsize = 6\n",
    "\n",
    "for occupied_orbitals, (parities, xvals) in parity_exact.items():\n",
    "    ax.plot(\n",
    "        xvals, parities, label=\"Ideal\" if not occupied_orbitals else None, color=\"black\"\n",
    "    )\n",
    "\n",
    "for occupied_orbitals, (parities, stddevs) in parity[dd_sequence][\"raw\"].items():\n",
    "    label = \"Raw\" if not occupied_orbitals else None\n",
    "    color = \"red\" if len(occupied_orbitals) % 2 else \"blue\"\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        parities,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"o\",\n",
    "        capsize=capsize,\n",
    "        color=colors[0],\n",
    "        alpha=0.7,\n",
    "        label=\"Raw\" if not occupied_orbitals else None,\n",
    "    )\n",
    "for occupied_orbitals, (parities, stddevs) in parity[dd_sequence][\"mem\"].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        parities,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"v\",\n",
    "        capsize=capsize,\n",
    "        color=colors[1],\n",
    "        alpha=0.7,\n",
    "        label=\"+MEM\" if not occupied_orbitals else None,\n",
    "    )\n",
    "for occupied_orbitals, (parities, stddevs) in parity[dd_sequence][\"ps\"].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        parities,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"s\",\n",
    "        capsize=capsize,\n",
    "        color=colors[2],\n",
    "        alpha=0.7,\n",
    "        label=\"+PS\" if not occupied_orbitals else None,\n",
    "    )\n",
    "ax.set_xlabel(r\"$\\mu$\")\n",
    "ax.set_ylabel(r\"$\\langle P \\rangle$\")\n",
    "ax.set_ylim(-1.1, 1.1)\n",
    "ax.legend()\n",
    "ax.set_title(rf\"$n = {params.n_modes}$\", size=\"x-large\", y=0.80)\n",
    "\n",
    "data.add_figures(fig, \"parity\", overwrite=True)\n",
    "plt.savefig(f\"{PLOT_DIR}/parity_dd-{dd_sequence}_n{params.n_modes}.{filetype}\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7074ad9-c828-4d21-b9c2-e3f96557c1f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot number\n",
    "fig, ax = plt.subplots(dpi=dpi)\n",
    "prop_cycle = plt.rcParams[\"axes.prop_cycle\"]\n",
    "colors = prop_cycle.by_key()[\"color\"]\n",
    "capsize = 6\n",
    "\n",
    "for occupied_orbitals, (numbers, xvals) in number_exact.items():\n",
    "    ax.plot(\n",
    "        xvals,\n",
    "        numbers,\n",
    "        label=\"Ideal\" if not occupied_orbitals else None,\n",
    "        color=\"black\",\n",
    "    )\n",
    "\n",
    "for occupied_orbitals, (numbers, stddevs) in number[dd_sequence][\"raw\"].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        numbers,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"o\",\n",
    "        capsize=capsize,\n",
    "        color=colors[0],\n",
    "        alpha=0.7,\n",
    "        label=\"Raw\" if not occupied_orbitals else None,\n",
    "    )\n",
    "for occupied_orbitals, (numbers, stddevs) in number[dd_sequence][\"pur\"].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        numbers,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"s\",\n",
    "        capsize=capsize,\n",
    "        color=colors[1],\n",
    "        alpha=0.7,\n",
    "        label=\"Mit.\" if not occupied_orbitals else None,\n",
    "    )\n",
    "ax.set_xlabel(r\"$\\mu$\")\n",
    "ax.set_ylabel(r\"$\\langle N \\rangle$\")\n",
    "ax.legend()\n",
    "\n",
    "data.add_figures(fig, \"number\", overwrite=True)\n",
    "plt.savefig(f\"{PLOT_DIR}/number_dd-{dd_sequence}_n{params.n_modes}.{filetype}\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aee73311-dfb6-4031-ac72-0c5521227fe8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot edge correlation\n",
    "fig, ax = plt.subplots(dpi=dpi)\n",
    "prop_cycle = plt.rcParams[\"axes.prop_cycle\"]\n",
    "colors = prop_cycle.by_key()[\"color\"]\n",
    "capsize = 6\n",
    "\n",
    "for occupied_orbitals, (values, xvals) in edge_correlation_exact.items():\n",
    "    ax.plot(\n",
    "        xvals,\n",
    "        values,\n",
    "        color=\"black\",\n",
    "        label=\"Ideal\" if not occupied_orbitals else None,\n",
    "    )\n",
    "\n",
    "for occupied_orbitals, (values, stddevs) in edge_correlation[dd_sequence][\n",
    "    \"raw\"\n",
    "].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        values,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"o\",\n",
    "        capsize=capsize,\n",
    "        color=colors[0],\n",
    "        alpha=0.7,\n",
    "        label=\"Raw\" if not occupied_orbitals else None,\n",
    "    )\n",
    "for occupied_orbitals, (values, stddevs) in edge_correlation[dd_sequence][\n",
    "    \"pur\"\n",
    "].items():\n",
    "    ax.errorbar(\n",
    "        params.chemical_potential_values,\n",
    "        values,\n",
    "        yerr=2 * np.array(stddevs),\n",
    "        fmt=\"s\",\n",
    "        capsize=capsize,\n",
    "        color=colors[1],\n",
    "        alpha=0.7,\n",
    "        label=\"Mit.\" if not occupied_orbitals else None,\n",
    "    )\n",
    "ax.set_xlabel(r\"$\\mu$\")\n",
    "ax.set_ylabel(r\"$\\langle -i \\gamma_1 \\gamma_6 \\rangle$\")\n",
    "ax.axhline([0], color=\"gray\", linestyle=\"--\")\n",
    "ax.legend(loc=\"center left\")\n",
    "ax.set_title(rf\"$n = {params.n_modes}$\")\n",
    "\n",
    "data.add_figures(fig, \"edge_correlation\", overwrite=True)\n",
    "plt.savefig(\n",
    "    f\"{PLOT_DIR}/edge_correlation_dd-{dd_sequence}_n{params.n_modes}.{filetype}\"\n",
    ")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "qiskit-research",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
